#Automated EC2 Instance Deployment with CloudFormation

#This project provides an AWS CloudFormation template to automate the deployment of EC2 instances in a variety of regions. 
#It demonstrates the power of cross-stack references, allowing you to set up EC2 instances that dynamically reference VPC and
#security group resources from another stack.

AWSTemplateFormatVersion: '2010-09-09'

Description:  Simple EC2 instance deployment referencing vpcStack.

Parameters:
  ProjectinstanceType:
    Type: String
    Default: "t2.micro"  
    Description: EC2 instance type.
  
  KeyName:
    Description: Name of an existing EC2 KeyPair for SSH access.
    Type: AWS::EC2::KeyPair::KeyName
    Default: my_key_pair
Mappings:
  RegionMap:
    us-east-1:
      HVM64: "ami-06b21ccaeff8cd686"
      HVMG2: "ami-0a584ac55a7631c0c"
    us-west-1:
      HVM64: "ami-0bdb828fd58c52235"
      HVMG2: "ami-066ee5fd4a9ef77f1"
    eu-west-1:
      HVM64: "ami-047bb4163c506cd98"
      HVMG2: "ami-0a7c483d527806435"
    ap-southeast-1:
      HVM64: "ami-08569b978cc4dfa10"
      HVMG2: "ami-0be9df32ae9f92309"
    ap-northeast-1:
      HVM64: "ami-06cd52961ce9f0d85"
      HVMG2: "ami-053cdd503598e4a9d"

Resources:
  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", HVM64]
      KeyName: !Ref KeyName
      InstanceType: !Ref ProjectinstanceType
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          DeleteOnTermination: true
          SubnetId: !ImportValue "PubSub1"
          GroupSet:
            - !ImportValue "vpcStack-SecurityGroupID"
      UserData:
        Fn::Base64: |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "Believe you can and you're halfway there" > /var/www/html/index.html
      Tags:
        - Key: Name
          Value: Project_Ec2
  
  MyEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      InstanceId: !Ref MyEC2Instance
      Domain: standard

Outputs:
  InstanceId:
    Description: EC2 Instance ID
    Value: !Ref MyEC2Instance
    Export:
      Name: !Sub "${AWS::StackName}-InstanceId"

  PublicIp:
    Description: EC2 Instance Public IPv4 Address
    Value: !GetAtt MyEC2Instance.PublicIp
    Export:
      Name: !Sub "${AWS::StackName}-PublicIp"  

  PublicDNSName:
    Description: EC2 Instance Public DNS Name
    Value: !GetAtt MyEC2Instance.PublicDnsName
    Export:
      Name: !Sub "${AWS::StackName}-PublicDnsName"
